{
	"version": "2",
	"templates": [
		{
			"type": 1,
			"title": "[test] Minecraft",
			"description": "Minecraft docker image, for more info and docs: https://github.com/itzg/docker-minecraft-server",
			"categories": [ "games" ],
			"platform": "linux",
			"logo": "https://cdn.freebiesupply.com/logos/large/2x/minecraft-1-logo-png-transparent.png",
			"image": "itzg/minecraft-server:latest",
			"restart_policy": "unless-stopped",
			"env": [
				{
					"name": "EULA",
					"label": "EULA",
					 "description": "minecraft version",
					 "default": "TRUE"
				},
				{
					"name": "VERSION",
					"label": "VERSION",
					 "description": "minecraft version",
					 "default": "1.17.1"
				},
				{
					"name": "TYPE",
					"label": "TYPE",
					 "description": "Type of the server: SPIGOT, VANILLA, BUKKIT ecc.",
					 "default": "SPIGOT"
				},
				{
					"name": "MOTD",
					"label": "MOTD",
					"default": "Minecraft server"
				},
				{
					"name": "ENABLE_RCON",
					"label": "ENABLE_RCON",
					"default": "true"
				},
				{
					"name": "RCON_PASSWORD",
					"label": "RCON_PASSWORD",
					"default": "bhobho12345678"
				},
				{
					"name": "RCON_PORT",
					"label": "RCON_PORT",
					 "default": "25575"
				},
				{
					"name": "MEMORY",
					"label": "MEMORY",
					 "default": "2G"
				},
				{
					"name": "TZ",
					"label": "TZ",
					"default": "Europe/Rom"
				}
			],
			"ports": [
				"25565/tcp"
			],
			"volumes": [
				{
					"container": "/data"
				},
				{
					"container": "/usr/share/nginx/html",
					"bind": "/var/www",
					"readonly": true
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools"
			],
			"description": "This is a Bitwarden server API implementation written in Rust compatible with upstream Bitwarden clients*, perfect for self-hosted deployment where running the official resource-heavy service might not be ideal..",
			"image": "bitwardenrs/server:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/bitwarden.png",
			"name": "bitwardenrs",
			"note": "This project is not associated with the Bitwarden project nor 8bit Solutions LLC.",
			"platform": "linux",
			"ports": [
				":80/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Bitwarden RS",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/Bitwarden-rs",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Cloud",
				"Books"
			],
			"description": "Calibre Web is a web app providing a clean interface for browsing, reading and downloading eBooks using an existing Calibre database.\n\n  [br][br]\n  [b][u][span style='color: #E80000;']Configuration[/span][/u][/b][br]\n  [b]/config[/b] Where Calibre-web should store it's database[br]\n  [b]/books[/b] Path to your calibre library metadata.db file[br]",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				}
			],
			"image": "linuxserver/calibre-web:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/calibre-web-icon.png",
			"name": "calibre-web",
			"platform": "linux",
			"ports": [
				"8083:8083/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Calibre Web",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Books",
					"container": "/books"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/Calibre-web",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Productivity"
			],
			"description": "Codiad is a web-based IDE framework with a small footprint and minimal requirements.\n  ",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				}
			],
			"image": "linuxserver/codiad:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/codiad-icon.png",
			"name": "codiad",
			"platform": "linux",
			"ports": [
				"80/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Codiad",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/Codiad",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools"
			],
			"description": "Web File Browser which can be used as a middleware or standalone app.",
			"image": "80x86/filebrowser:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/filebrowser.png",
			"name": "filebrowser",
			"note": "The default user and password is admin/admin.",
			"platform": "linux",
			"ports": [
				"8082:8082/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "FileBrowser",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/FileBrowser",
					"container": "/config"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config",
					"container": "/myfiles"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools"
			],
			"description": "A clientless remote desktop gateway.",
			"image": "oznu/guacamole:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/guacamole.png",
			"name": "guacamole",
			"note": "The default login will be guacadmin/guacadmin. It is common practice to add a new admin user and remove the default user for Guacamole.",
			"platform": "linux",
			"ports": [
				"8080:8080/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Guacamole",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/Guacamole",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools"
			],
			"description": "A dead simple static HOMepage for your servER to keep your s ervices on hand, from a simple yaml configuration file.",
			"image": "b4bz/homer:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/homer.png",
			"name": "homer",
			"note": "This container requires a yml file within the config volume. See the documentation here https://github.com/bastienwirtz/homer",
			"platform": "linux",
			"ports": [
				"8902:8080/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Homer",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/Homer/assets",
					"container": "/www/assets"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/Homer",
					"container": "/www/config.yml"
				}
			]
		},
		{
			"categories": [
				"Tools",
				"Web"
			],
			"description": "This container sets up an Nginx webserver and reverse proxy with php support and a built-in letsencrypt client that automates free SSL server certificate generation and renewal processes. It also contains fail2ban for intrusion prevention.\r\n  \r\n  Before running this container, make sure that the url and subdomains are properly forwarded to this container's host.\r\n  \r\n  - Port 443 on the internet side of the router should be forwarded to this container's port 443.\r\n  - If you need a dynamic dns provider, you can use the free provider duckdns.org where the url will be yoursubdomain.duckdns.org and the subdomains    can be www,ftp,cloud\r\n  - The container detects changes to url and subdomains, revokes existing certs and generates new ones during start. \r\n  - It also detects changes to the DHLEVEL parameter and replaces the dhparams file.\r\n  \r\n  - If you'd like to password protect your sites, you can use htpasswd. Run the following command on your host to generate the htpasswd file docker exec -it letsencrypt htpasswd -c /config/nginx/.htpasswd \u0026lt;username\u0026gt;",
			"env": [
				{
					"label": "EMAIL",
					"name": "EMAIL",
					"set": "-Xms256m -Xmx512m"
				},
				{
					"label": "URL",
					"name": "URL",
					"set": "-Xms256m -Xmx512m"
				},
				{
					"label": "SUBDOMAINS",
					"name": "SUBDOMAINS",
					"set": "www,"
				},
				{
					"label": "ONLY_SUBDOMAINS",
					"name": "ONLY_SUBDOMAINS",
					"set": "false"
				},
				{
					"label": "DHLEVEL",
					"name": "DHLEVEL",
					"set": "2048"
				},
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				},
				{
					"label": "VALIDATION",
					"name": "VALIDATION",
					"set": "http"
				},
				{
					"label": "DNSPLUGIN",
					"name": "DNSPLUGIN",
					"set": "http"
				}
			],
			"image": "linuxserver/letsencrypt:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/letsencrypt.png",
			"name": "letsencrypt",
			"platform": "linux",
			"ports": [
				"80/tcp",
				"443/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Let's Encrypt",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/LetsEncrypt",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Other"
			],
			"description": "McMyAdmin 2 is the leading web control panel and administration console for Minecraft servers.",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				}
			],
			"image": "linuxserver/mcmyadmin2:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/mcmyadmin-icon.png",
			"name": "mcmyadmin2",
			"platform": "linux",
			"ports": [
				"8080:8080/tcp",
				"25565:25565/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "McMyAdmin 2",
			"type": 1,
			"volumes": [
				{
					"container": "/minecraft"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Voice",
				"Chat"
			],
			"description": "Mumble is a voicechat program for gamers written on top of Qt and Opus. Murmur is the server backend for Mumble.",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				},
				{
					"label": "TZ",
					"name": "TZ"
				}
			],
			"image": "goofball222/murmur:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/Mumble-logo.png",
			"name": "murmur",
			"platform": "linux",
			"ports": [
				"64738:64738/tcp",
				"64738:64738/udp"
			],
			"restart_policy": "unless-stopped",
			"title": "Murmur",
			"type": 1,
			"volumes": [
				{
					"bind": "/etc/localtime:ro",
					"container": "/etc/localtime"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/Config/Murmur",
					"container": "/opt/murmur/config"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/Murmur/data",
					"container": "/opt/murmur/data"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/Murmur/log",
					"container": "/opt/murmur/log"
				}
			]
		},
		{
			"categories": [
				"Cloud",
				"Productivity",
				"Tools",
				"Other",
				"Web"
			],
			"description": "Where are your photos and documents? With Nextcloud you pick a server of your choice, at home, in a data center or at a provider. And that is where your files will be. Nextcloud runs on that server, protecting your data and giving you access from your desktop or mobile devices.",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				},
				{
					"label": "TZ",
					"name": "TZ"
				},
				{
					"label": "DATABASE_PASSWORD",
					"name": "DATABASE_PASSWORD"
				},
				{
					"label": "MYSQL_ROOT_PASSWORD",
					"name": "MYSQL_ROOT_PASSWORD"
				},
				{
					"label": "PORT",
					"name": "PORT"
				}
			],
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/nextcloud-icon.png",
			"name": "nextcloud",
			"note": "The database user is nextcloud and the database is nextcloud_db. The host of the database will be located at the bottom of the DB conotainer in portainer.",
			"platform": "linux",
			"repository": {
				"stackfile": "Template/Stack/OMV5/nextcloud.yml",
				"url": "https://github.com/SelfhostedPro/selfhosted_templates"
			},
			"title": "Nextcloud",
			"type": 3
		},
		{
			"categories": [
				"Other"
			],
			"description": "OpenVPN Access Server is a full featured secure network tunneling VPN software solution that integrates OpenVPN server capabilities, enterprise management capabilities, simplified OpenVPN Connect UI, and OpenVPN Client software packages that accommodate Windows, MAC, Linux, Android, and iOS environments.",
			"env": [
				{
					"label": "INTERFACE",
					"name": "INTERFACE",
					"set": "eth0"
				},
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				}
			],
			"image": "linuxserver/openvpn-as:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/openvpn-as-icon.png",
			"name": "openvpn-as",
			"platform": "linux",
			"ports": [
				"943:943/tcp",
				"9443:9443/tcp",
				"1194:1194/udp"
			],
			"restart_policy": "unless-stopped",
			"title": "OpenVPN Access Server",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/OpenVPN-AS",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Other",
				"VPN",
				"Tools"
			],
			"description": "This container contains OpenVPN and Transmission with a configuration\nwhere Transmission is running only when OpenVPN has an active tunnel.\nIt bundles configuration files for many popular VPN providers to make the setup easier.",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				},
				{
					"default": "MULLVAD",
					"description": "https://haugene.github.io/docker-transmission-openvpn/supported-providers/",
					"label": "OPENVPN_PROVIDER",
					"name": "OPENVPN_PROVIDER"
				},
				{
					"default": "",
					"label": "OPENVPN_USERNAME",
					"name": "OPENVPN_USERNAME"
				},
				{
					"default": "",
					"label": "OPENVPN_PASSWORD",
					"name": "OPENVPN_PASSWORD"
				},
				{
					"default": "192.168.0.0/24",
					"label": "LOCAL_NETWORK",
					"name": "LOCAL_NETWORK"
				}
			],
			"image": "haugene/transmission-openvpn:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/transmission-icon.png",
			"name": "transmission-openvpn",
			"note": "List of supported providers available \u003ca href='https://haugene.github.io/docker-transmission-openvpn/supported-providers'/\u003ehere\u003c/a\u003e.",
			"platform": "linux",
			"ports": [
				"9091:9091/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Transmission-OpenVPN",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Downloads",
					"container": "/data"
				},
				{
					"bind": "/etc/localtime",
					"container": "/etc/localtime"
				}
			]
		},
		{
			"categories": [
				"Video",
				"Music",
				"Photos"
			],
			"description": "Your favorite movies, TV, music, web shows, podcasts, and more, all streamed to your favorite screens.",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				},
				{
					"label": "VERSION",
					"name": "VERSION",
					"set": "latest"
				}
			],
			"image": "linuxserver/plex:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/plex-icon.png",
			"name": "plex",
			"network": "host",
			"platform": "linux",
			"restart_policy": "unless-stopped",
			"title": "Plex",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/Plex",
					"container": "/config"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/TV",
					"container": "/tv"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Movies",
					"container": "/movies"
				}
			]
		},
		{
			"categories": [
				"Downloaders",
				"Other",
				"Video",
				"Tools"
			],
			"description": "Simple automated way for users to request new content for Plex.",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				},
				{
					"label": "URL_BASE",
					"name": "URL_BASE",
					"set": ""
				}
			],
			"image": "linuxserver/plexrequests:latest",
			"logo": "https://raw.githubusercontent.com/linuxserver/beta-templates/master/lsiodev/img/plexrequests-icon.png",
			"name": "plexrequests",
			"platform": "linux",
			"ports": [
				"3000:3000/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Plex Requests",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/PlexRequests",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Email",
				"Productivity",
				"Tools",
				"Other"
			],
			"description": "This is an unofficial Docker container of the ProtonMail Bridge. Some of the scripts are based on Hendrik Meyer's work.",
			"image": "shenxn/protonmail-bridge:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/protonmail-bridge.png",
			"name": "protonmail-bridge",
			"note": "Please refer to the documentation \u003ca href='https://hub.docker.com/r/shenxn/protonmail-bridge'/\u003ehere\u003c/a\u003e to set this up.",
			"platform": "linux",
			"ports": [
				"143/tcp",
				"25/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "ProtonMail Bridge",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/ProtonMail-Bridge",
					"container": "/root"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Downloaders"
			],
			"description": "YoutubeDL-Material is a Material Design frontend for youtube-dl. It's coded using Angular 9 for the frontend, and Node.js on the backend.",
			"image": "tzahi12345/youtubedl-material:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/ytdlm.png",
			"name": "youtubedl-material",
			"platform": "linux",
			"ports": [
				"17442:17442/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "YouTubeDL-Material",
			"type": 1,
			"volumes": [
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Config/YTDLM",
					"container": "/app/appdata"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Youtube/Video",
					"container": "/app/video"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Youtube/Subscriptions",
					"container": "/app/subscriptions"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Youtube/Users",
					"container": "/app/users"
				},
				{
					"bind": "/srv/dev-disk-by-label-media/Files/AppData/Youtube/Audio",
					"container": "/app/audio"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools"
			],
			"description": "A web interface for managing docker containers with an emphasis on templating to provide 1 click deployments. Think of it like a decentralized app store for servers that anyone can make packages for.",
			"image": "selfhostedpro/yacht:latest",
			"logo": "https://raw.githubusercontent.com/SelfhostedPro/Yacht/master/readme_media/Yacht_logo_1_dark.png",
			"name": "yacht",
			"platform": "linux",
			"ports": [
				"8001:8000/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Yacht",
			"type": 1,
			"volumes": [
				{
					"bind": "yacht",
					"container": "/config"
				},
				{
					"bind": "/var/run/docker.sock",
					"container": "/var/run/docker.sock"
				}
			]
		},
		{
			"type": 1,
			"title": "Nginx",
			"description": "High performance web server",
			"categories": [
				"webserver"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/nginx.png",
			"image": "nginx:latest",
			"ports": [
				"80/tcp",
				"443/tcp"
			],
			"volumes": [{
					"container": "/etc/nginx"
				},
				{
					"container": "/usr/share/nginx/html"
				}
			]
		},
		{
			"type": 1,
			"title": "Httpd",
			"description": "Open-source HTTP server",
			"categories": [
				"webserver"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/httpd.png",
			"image": "httpd:latest",
			"ports": [
				"80/tcp"
			],
			"volumes": [{
				"container": "/usr/local/apache2/htdocs/"
			}]
		},
		{
			"type": 1,
			"title": "MySQL",
			"description": "The most popular open-source database",
			"categories": [
				"database"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/mysql.png",
			"image": "mysql:latest",
			"env": [{
				"name": "MYSQL_ROOT_PASSWORD",
				"label": "Root password"
			}],
			"ports": [
				"3306/tcp"
			],
			"volumes": [{
				"container": "/var/lib/mysql"
			}]
		},
		{
			"type": 1,
			"title": "MariaDB",
			"description": "Performance beyond MySQL",
			"categories": [
				"database"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/mariadb.png",
			"image": "mariadb:latest",
			"env": [{
				"name": "MYSQL_ROOT_PASSWORD",
				"label": "Root password"
			}],
			"ports": [
				"3306/tcp"
			],
			"volumes": [{
				"container": "/var/lib/mysql"
			}]
		},
		{
			"type": 1,
			"title": "PostgreSQL",
			"description": "The most advanced open-source database",
			"categories": [
				"database"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/postgres.png",
			"image": "postgres:latest",
			"env": [{
					"name": "POSTGRES_USER",
					"label": "Superuser"
				},
				{
					"name": "POSTGRES_PASSWORD",
					"label": "Superuser password"
				}
			],
			"ports": [
				"5432/tcp"
			],
			"volumes": [{
				"container": "/var/lib/postgresql/data"
			}]
		},
		{
			"type": 1,
			"title": "Mongo",
			"description": "Open-source document-oriented database",
			"categories": [
				"database"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/mongo.png",
			"image": "mongo:latest",
			"ports": [
				"27017/tcp"
			],
			"volumes": [{
				"container": "/data/db"
			}]
		},
		{
			"type": 1,
			"title": "Gitlab CE",
			"description": "Open-source end-to-end software development platform",
			"note": "Default username is <b>root</b>. Check the <a href=\"https://docs.gitlab.com/omnibus/docker/README.html#after-starting-a-container\" target=\"_blank\">Gitlab documentation</a> to get started.",
			"categories": [
				"development",
				"project-management"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/gitlab_ce.png",
			"image": "gitlab/gitlab-ce:latest",
			"ports": [
				"80/tcp",
				"443/tcp",
				"22/tcp"
			],
			"volumes": [{
					"container": "/etc/gitlab"
				},
				{
					"container": "/var/log/gitlab"
				},
				{
					"container": "/var/opt/gitlab"
				}
			]
		},
		{
			"type": 1,
			"title": "Scality S3",
			"description": "Standalone AWS S3 protocol server",
			"categories": [
				"storage"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/scality-s3.png",
			"image": "scality/s3server",
			"ports": [
				"8000/tcp"
			],
			"env": [{
					"name": "SCALITY_ACCESS_KEY",
					"label": "Scality S3 access key"
				},
				{
					"name": "SCALITY_SECRET_KEY",
					"label": "Scality S3 secret key"
				}
			],
			"volumes": [{
					"container": "/usr/src/app/localData"
				},
				{
					"container": "/usr/src/app/localMetadata"
				}
			]
		},
		{
			"type": 1,
			"title": "Redis",
			"description": "Open-source in-memory data structure store",
			"categories": [
				"database"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/redis.png",
			"image": "redis:latest",
			"ports": [
				"6379/tcp"
			],
			"volumes": [{
				"container": "/data"
			}]
		},
		{
			"type": 1,
			"title": "Plesk",
			"description": "WebOps platform and hosting control panel",
			"categories": [
				"CMS"
			],
			"platform": "linux",
			"note": "Default credentials: admin / changeme",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/plesk.png",
			"image": "plesk/plesk:latest",
			"ports": [
				"21/tcp",
				"80/tcp",
				"443/tcp",
				"8880/tcp",
				"8443/tcp",
				"8447/tcp"
			]
		},
		{
			"type": 1,
			"title": "Magento 2",
			"description": "Open-source e-commerce platform",
			"categories": [
				"CMS"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/magento.png",
			"image": "alankent/gsd:latest",
			"ports": [
				"80/tcp",
				"3000/tcp",
				"3001/tcp"
			],
			"volumes": [{
				"container": "/var/www/html/"
			}]
		},
		{
			"type": 1,
			"title": "Sematext Docker Agent",
			"description": "Collect logs, metrics and docker events",
			"categories": [
				"Log Management",
				"Monitoring"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/sematext_agent.png",
			"image": "sematext/sematext-agent-docker:latest",
			"name": "sematext-agent",
			"privileged": true,
			"env": [{
					"name": "LOGSENE_TOKEN",
					"label": "Logs token"
				},
				{
					"name": "SPM_TOKEN",
					"label": "SPM monitoring token"
				}
			],
			"volumes": [{
				"container": "/var/run/docker.sock",
				"bind": "/var/run/docker.sock"
			}]
		},
		{
			"type": 1,
			"title": "File browser",
			"description": "A web file manager",
			"note": "Default credentials: admin/admin",
			"categories": [
				"filesystem",
				"storage"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/filebrowser.png",
			"image": "filebrowser/filebrowser:latest",
			"ports": [
				"80/tcp"
			],
			"volumes": [{
					"container": "/data"
				},
				{
					"container": "/srv"
				}
			],
			"command": "--port 80 --database /data/database.db --root /srv"
		},
		{
			"type": 2,
			"title": "Portainer Agent",
			"description": "Manage all the resources in your Swarm cluster",
			"note": "The agent will be deployed globally inside your cluster and available on port 9001.",
			"categories": [
				"portainer"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/portainer.png",
			"repository": {
				"url": "https://github.com/portainer/templates",
				"stackfile": "stacks/portainer-agent/docker-stack.yml"
			}
		},
		{
			"type": 2,
			"title": "OpenFaaS",
			"name": "func",
			"description": "Serverless functions made simple",
			"note": "Deploys the API gateway and sample functions. You can access the UI on port 8080. <b>Warning</b>: the name of the stack must be 'func'.",
			"categories": [
				"serverless"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/openfaas.png",
			"repository": {
				"url": "https://github.com/openfaas/faas",
				"stackfile": "docker-compose.yml"
			}
		},
		{
			"type": 2,
			"title": "IronFunctions",
			"description": "Open-source serverless computing platform",
			"note": "Deploys the IronFunctions API and UI.",
			"categories": [
				"serverless"
			],
			"platform": "linux",
			"logo": "https://portainer-io-assets.sfo2.digitaloceanspaces.com/logos/ironfunctions.png",
			"repository": {
				"url": "https://github.com/portainer/templates",
				"stackfile": "stacks/ironfunctions/docker-stack.yml"
			}
		}
	]
}
